name: practix
services:

#  elastic_content:
#    image: elasticsearch:${ELASTIC_VERSION}
#    container_name: ${ELASTIC_HOST}
#    restart: always
#    environment:
#      - xpack.security.enabled=false
#      - "discovery.type=single-node"
#    env_file:
#      - .env
#    volumes:
#      - elastic_content_data:/usr/share/elasticsearch/data
#    healthcheck:
#      test: curl -s http://${ELASTIC_HOST}:${ELASTIC_PORT} >/dev/null || exit 1
#      interval: 30s
#      timeout: 10s
#      retries: 50
#      start_period: 10s
#    ports:
#      - "${ELASTIC_PORT}:9200"
#    networks:
#      - services

  postgres_content:
    container_name: ${CONTENT_POSTGRES_HOST}
    extends:
      file: ./infra/docker/postgres.yml
      service: postgres_base
    env_file:
      - infra/var/content/.env.postgres
    volumes:
      - postgres_content_data:/var/lib/postgresql/data/
      - ./postgres_content/:/docker-entrypoint-initdb.d
    ports:
      - "${CONTENT_POSTGRES_PORT}:5432"

  postgres_auth:
    container_name: ${AUTH_POSTGRES_HOST}
    extends:
      file: ./infra/docker/postgres.yml
      service: postgres_base
    env_file:
      - infra/var/auth/.env.postgres
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data/
    ports:
      - "${AUTH_POSTGRES_PORT}:5432"

  migrations_auth:
    build:
      dockerfile: ./migrations/Dockerfile
    container_name: migrations_auth
    environment:
      - LOCAL=False
    env_file:
      - infra/var/auth/.env.postgres
    depends_on:
      postgres_auth:
        condition: service_healthy
    networks:
      - services

  redis_content:
    container_name: ${CONTENT_REDIS_HOST}
    extends:
      file: ./infra/docker/redis.yml
      service: redis_base
    env_file:
      - infra/var/content/.env.redis
    volumes:
      - redis_content_data:/var/lib/redis/data
    ports:
      - "${CONTENT_REDIS_PORT}:6379"

  redis_auth:
    container_name: ${AUTH_REDIS_HOST}
    extends:
      file: ./infra/docker/redis.yml
      service: redis_base
    env_file:
      - infra/var/auth/.env.redis
    volumes:
      - redis_auth_data:/var/lib/redis/data
    ports:
      - "${AUTH_REDIS_PORT}:6379"

#  etl-content-movies:
#      &base-etl
#      build:
#        dockerfile: src/etl_content/Dockerfile
#      container_name: etl-content-movies
#      restart: always
#      environment:
#        - ETL_NAME=movies
#      env_file:
#        - env/.env.content
#      depends_on:
#        postgres_content:
#          condition: service_healthy
#        elastic_content:
#          condition: service_healthy
#      networks:
#        - services
#
#  etl-content-genres:
#    <<: *base-etl
#    container_name: etl-content-genres
#    environment:
#      - ETL_NAME=genres
#
#  etl-content-persons:
#    <<: *base-etl
#    container_name: etl-content-persons
#    environment:
#      - ETL_NAME=persons
#
#  service_content:
#    &base-service
#    build:
#      dockerfile: src/content/Dockerfile
#    container_name: ${API_HOST}
#    restart: always
#    env_file:
#      - env/.env.content
#    environment:
#      - LOCAL=False
#    depends_on:
#      postgres_content:
#        condition: service_healthy
#      elastic_content:
#        condition: service_healthy
#      redis_content:
#        condition: service_healthy
#    expose:
#      - "8000"
#    networks:
#      - services
#
#  service_auth:
#    <<: *base-service
#    build:
#      dockerfile: src/auth/Dockerfile
#    env_file:
#      - env/.env.auth
#    depends_on:
#      postgres_auth:
#        condition: service_healthy
#      redis_auth:
#        condition: service_healthy
#
#  service_admin:
#    <<: *base-service
#    build:
#      dockerfile: src/admin/Dockerfile
#    env_file:
#      - env/.env.admin
#      - env/.env.content
#    volumes:
#      - static:/backend_static
#    postgres_content:
#      condition: service_healthy
#
#  nginx:
#    image: nginx:${NGINX_VERSION}
#    container_name: ${NGINX_HOST}
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./nginx/configs:/etc/nginx/conf.d:ro
#      - static:/staticfiles/
#    restart: unless-stopped
#    env_file:
#      - env/.env.nginx
#    depends_on:
#      postgres_auth:
#        condition: service_healthy
#      redis_auth:
#        condition: service_healthy
#      postgres_content:
#        condition: service_healthy
#      elastic_content:
#        condition: service_healthy
#      redis_content:
#        condition: service_healthy
#      service_auth:
#        condition: service_started
#      service_content:
#        condition: service_started
#    ports:
#      - "443:443"
#      - "80:80"
#    networks:
#      - services


volumes:
  elastic_content_data:
  postgres_content_data:
  redis_content_data:
  postgres_auth_data:
  redis_auth_data:
  static:

networks:
  services:
