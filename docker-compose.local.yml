name: auth_app
services:

  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${POSTGRES_HOST}
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 3s
      timeout: 3s
      retries: 5
      start_period: 3s
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - services

  migrations:
    build:
      dockerfile: ./migrations/Dockerfile
    container_name: migrations
    environment:
      - LOCAL=False
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - services

  redis:
    image: redis:${REDIS_VERSION}
    container_name: ${REDIS_HOST}
    restart: always
    env_file:
      - .env
    volumes:
      - redis_data:/var/lib/redis/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - services

  api:
    build:
      dockerfile: src/auth/Dockerfile
    container_name: ${API_HOST}
    restart: always
    environment:
      - LOCAL=False
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8000"
    networks:
      - services

  nginx:
    image: nginx:${NGINX_VERSION}
    container_name: gateway
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
      - static:/staticfiles/
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started
    ports:
      - "443:443"
      - "80:80"
    networks:
      - services


volumes:
  postgres_data:
  redis_data:
  static:

networks:
  services:
